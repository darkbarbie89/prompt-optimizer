# AI Programming Rules Guide

## 1. Development Environment

### 1.1 System
- Assume Windows environment
- Use Windows command syntax
- Use `\` for paths

### 1.2 Testing
- Run `npm run test` after each code change
- All tests must pass
- New features require tests:
  - Unit tests
  - Integration tests
  - Error scenarios

---

## 2. Documentation

### 2.1 Experience Log (`experience.md`)
- Track:
  - Reusable components
  - Dependency versions
  - Model configs
  - Bug fixes
  - Best practices
- Organize by:
  - Architecture
  - Error handling
  - Testing
  - Vue development
  - Tool configs
  - Refactoring

### 2.2 Scratchpad (`scratchpad.md`)
Use for task planning:
```markdown
## Task: [Name] - [Date]
### Goal
[Description]

### Steps
[ ] 1. [Step]
    - Expected:
    - Risks:
[x] 2. [Completed step]
    - Time:
    - Result:

### Issues
1. [Issue]
   - Cause:
   - Solution:
   - Lesson:

### Milestones
- [x] [Done]
- [ ] [Pending]
```

---

## 3. Code Standards

### 3.1 API
- Decouple logic from config
- Use OpenAI-compatible format
- Manage prompt templates separately
- Use env variables for sensitive info

### 3.2 Error Handling
```typescript
try {
  await apiCall();
} catch (err) {
  console.error("[Error type]", err.context);
  throw new Error("Friendly error message");
}
```

### 3.3 Types
```typescript
interface ModelConfig {
  name: string;
  baseURL: string;
  models: string[];
}
```

---

## 4. Workflow

### New Features
1. Review requirements
2. Design solution
3. Write tests
4. Implement
5. Test
6. Update docs

### Bug Fixes
1. Reproduce and analyze
2. Plan fix
3. Write tests
4. Apply fix
5. Validate
6. Update experience log

### Code Review
- Type safety
- Error handling
- Test coverage
- Style
- Performance

---

## 5. Key Docs
- `fileNames.md`: project map
- `docs/prd.md`: product requirements
- `docs/app-flow.md`: app flow
- `docs/tech-stack.md`: tech stack
- `docs/file-structure.md`: file structure
- `docs/frontend-guidelines.md`: frontend guide

---

## 6. Session Management

### Start
1. Review task context
2. Confirm environment
3. Plan

### Execute
1. Confirm steps
2. Generate code
3. Test
4. Update docs

### End
1. Summarize work
2. Log issues
3. Update experience log
4. Plan next task

---

## 7. Context Management
- Focus on key info
- Avoid unrelated actions
- Keep responses precise
- Reuse solutions
- Sync docs promptly
